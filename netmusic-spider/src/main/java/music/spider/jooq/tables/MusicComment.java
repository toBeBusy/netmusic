/**
 * This class is generated by jOOQ
 */
package music.spider.jooq.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import music.spider.jooq.Keys;
import music.spider.jooq.MusicSpider;
import music.spider.jooq.tables.records.MusicCommentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MusicComment extends TableImpl<MusicCommentRecord> {

    private static final long serialVersionUID = -2111868531;

    /**
     * The reference instance of <code>music_spider.music_comment</code>
     */
    public static final MusicComment MUSIC_COMMENT = new MusicComment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MusicCommentRecord> getRecordType() {
        return MusicCommentRecord.class;
    }

    /**
     * The column <code>music_spider.music_comment.id</code>. 自增主键
     */
    public final TableField<MusicCommentRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "自增主键");

    /**
     * The column <code>music_spider.music_comment.song_id</code>. 关联的歌曲Id
     */
    public final TableField<MusicCommentRecord, Long> SONG_ID = createField("song_id", org.jooq.impl.SQLDataType.BIGINT, this, "关联的歌曲Id");

    /**
     * The column <code>music_spider.music_comment.comment</code>. 评论
     */
    public final TableField<MusicCommentRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "评论");

    /**
     * Create a <code>music_spider.music_comment</code> table reference
     */
    public MusicComment() {
        this("music_comment", null);
    }

    /**
     * Create an aliased <code>music_spider.music_comment</code> table reference
     */
    public MusicComment(String alias) {
        this(alias, MUSIC_COMMENT);
    }

    private MusicComment(String alias, Table<MusicCommentRecord> aliased) {
        this(alias, aliased, null);
    }

    private MusicComment(String alias, Table<MusicCommentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MusicSpider.MUSIC_SPIDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MusicCommentRecord, Long> getIdentity() {
        return Keys.IDENTITY_MUSIC_COMMENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MusicCommentRecord> getPrimaryKey() {
        return Keys.KEY_MUSIC_COMMENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MusicCommentRecord>> getKeys() {
        return Arrays.<UniqueKey<MusicCommentRecord>>asList(Keys.KEY_MUSIC_COMMENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MusicCommentRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MusicCommentRecord, ?>>asList(Keys.COMMENT_SONG_FORGIN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MusicComment as(String alias) {
        return new MusicComment(alias, this);
    }

    /**
     * Rename this table
     */
    public MusicComment rename(String name) {
        return new MusicComment(name, null);
    }
}
