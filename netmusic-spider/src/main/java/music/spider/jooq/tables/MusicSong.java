/**
 * This class is generated by jOOQ
 */
package music.spider.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import music.spider.jooq.Keys;
import music.spider.jooq.MusicSpider;
import music.spider.jooq.tables.records.MusicSongRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MusicSong extends TableImpl<MusicSongRecord> {

    private static final long serialVersionUID = -1104643602;

    /**
     * The reference instance of <code>music_spider.music_song</code>
     */
    public static final MusicSong MUSIC_SONG = new MusicSong();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MusicSongRecord> getRecordType() {
        return MusicSongRecord.class;
    }

    /**
     * The column <code>music_spider.music_song.id</code>. 自增主键
     */
    public final TableField<MusicSongRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "自增主键");

    /**
     * The column <code>music_spider.music_song.ranking_id</code>. 排行榜ID
     */
    public final TableField<MusicSongRecord, Long> RANKING_ID = createField("ranking_id", org.jooq.impl.SQLDataType.BIGINT, this, "排行榜ID");

    /**
     * The column <code>music_spider.music_song.name</code>. 歌曲名
     */
    public final TableField<MusicSongRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "歌曲名");

    /**
     * The column <code>music_spider.music_song.ranking_no</code>. 排名
     */
    public final TableField<MusicSongRecord, Integer> RANKING_NO = createField("ranking_no", org.jooq.impl.SQLDataType.INTEGER, this, "排名");

    /**
     * The column <code>music_spider.music_song.time</code>. 歌曲时长，单位：秒
     */
    public final TableField<MusicSongRecord, Integer> TIME = createField("time", org.jooq.impl.SQLDataType.INTEGER, this, "歌曲时长，单位：秒");

    /**
     * The column <code>music_spider.music_song.singer</code>. 歌手
     */
    public final TableField<MusicSongRecord, String> SINGER = createField("singer", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "歌手");

    /**
     * The column <code>music_spider.music_song.url</code>. 网易云音乐链接
     */
    public final TableField<MusicSongRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "网易云音乐链接");

    /**
     * The column <code>music_spider.music_song.update_time</code>. 更新时间
     */
    public final TableField<MusicSongRecord, Timestamp> UPDATE_TIME = createField("update_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "更新时间");

    /**
     * Create a <code>music_spider.music_song</code> table reference
     */
    public MusicSong() {
        this("music_song", null);
    }

    /**
     * Create an aliased <code>music_spider.music_song</code> table reference
     */
    public MusicSong(String alias) {
        this(alias, MUSIC_SONG);
    }

    private MusicSong(String alias, Table<MusicSongRecord> aliased) {
        this(alias, aliased, null);
    }

    private MusicSong(String alias, Table<MusicSongRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return MusicSpider.MUSIC_SPIDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MusicSongRecord, Long> getIdentity() {
        return Keys.IDENTITY_MUSIC_SONG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MusicSongRecord> getPrimaryKey() {
        return Keys.KEY_MUSIC_SONG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MusicSongRecord>> getKeys() {
        return Arrays.<UniqueKey<MusicSongRecord>>asList(Keys.KEY_MUSIC_SONG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MusicSongRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MusicSongRecord, ?>>asList(Keys.SONG_RANKING_FORGIN_KEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MusicSong as(String alias) {
        return new MusicSong(alias, this);
    }

    /**
     * Rename this table
     */
    public MusicSong rename(String name) {
        return new MusicSong(name, null);
    }
}
